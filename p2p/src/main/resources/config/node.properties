
NodeServer.NodeId=3056301006072a8648cf


NodeServer.overlayName=yyyyyy


NodeServer.AbandonDuplicatedRequestMessageDuration=30


#Reachable.Remote.Endpoints=relayNode:tcp -h localhost -p 10003


#Reachable.Relay.Endpoints=6e6f646531:tcp -h localhost -p 10001

NodeServer.service=Session:com.platon.p2p.session.SessionServiceImpl:1,StorageService:com.platon.p2p.storage.StorageServiceImpl:1,Routing:com.platon.p2p.plugins.PluginImpl:1,LinkService:com.platon.p2p.attach.LinkServiceImpl:1,ServiceDiscovery:com.platon.p2p.redir.ServiceDiscoveryImpl:1,ChatService:com.platon.p2p.chat.ChatServiceImpl:1,Voice:com.platon.p2p.test.VoiceServiceImpl:1
NodeServer.admin.service=admin:com.platon.p2p.admin.ContextImpl:1,chat:com.platon.p2p.chat.ChatServiceAdminImpl:1,clientAccess:com.platon.p2p.admin.ClientAccessImpl:1,systemState:com.platon.p2p.admin.SystemStateImpl:1,context:com.platon.p2p.admin.ContextImpl:1


#NodeServer.relay=*:999999



NodeServer.HttpServer=1


NodeServer.HttpServer.context=config/context.xml



NodeServer.ChatServer=1



Ice.Default.Package=com.platon.p2p.slice


#
# Configure endpoints for local node server.
#
NodeServer.Endpoints=tcp -h localhost -p 10001
NodeServerAdmin.Endpoints=ws -h localhost -p 11001



Ice.Default.Timeout=60000


#
# CloseOff	0	Disables automatic connection closure. A connection will be closed when the communicator is destroyed, when there's a network failure or when the peer closes it.
# CloseOnIdle	1	Gracefully closes a connection that has been idle for the configured timeout period. A connection is idle if it has no pending outgoing or incoming requests.
# CloseOnInvocation	2	Forcefully closes a connection that has been idle for the configured timeout period, but only if the connection has pending outgoing requests. This is useful when you don't want a connection to be closed when idle but still want the connection to be forcefully closed when invocations are in progress and no messages are received from the server (potentially indicating that the server is dead). This should be used with a heartbeat configuration where heartbeats are sent at regular intervals by a server while an invocation is being dispatched.
# CloseOnInvocationAndIdle	3	Combines the behaviors of CloseOnIdle and CloseOnInvocation.
# CloseOnIdleForceful	4	Forcefully closes a connection that has been idle for the configured timeout period, regardless of whether the connection has pending outgoing or incoming requests. This is typically used together with a heartbeat configuration that keeps idle connections alive.
#
Ice.ACM.Close=0

#
# HeartbeatOff	0	Disables client-side heartbeats.
# HeartbeatOnInvocation	1	Send a heartbeat at regular intervals if there are pending incoming requests.
# HeartbeatOnIdle	2	Send a heartbeat at regular intervals when the connection is idle.
# HeartbeatAlways	3
#
Ice.ACM.Heartbeat=3


Ice.ACM.Timeout=30




Ice.ThreadPool.Client.Size=100
Ice.ThreadPool.Client.SizeWarn=50


Ice.ThreadPool.Server.Size=100
Ice.ThreadPool.Server.SizeWarn=50


Ice.Trace.ThreadPool=1


#
# Warn about connection exceptions
#
Ice.Warn.Connections=1

#
# Network Tracing
#
# 0 = no network tracing
# 1 = trace connection establishment and closure
# 2 = like 1, but more detailed
# 3 = like 2, but also trace data transfer
#
#Ice.Trace.Network=1

#
# Protocol Tracing
#
# 0 = no protocol tracing
# 1 = trace protocol messages
#
#Ice.Trace.Protocol=1

#
# Security Tracing
#
# 0 = no security tracing
# 1 = trace messages
#
#IceSSL.Trace.Security=1

#
# SSL Configuration
#
#Ice.Plugin.IceSSL=com.zeroc.IceSSL.PluginFactory
#IceSSL.VerifyPeer=0
#IceSSL.DefaultDir=../../../certs
#IceSSL.Keystore=nodeServer.jks
#IceSSL.Password=password